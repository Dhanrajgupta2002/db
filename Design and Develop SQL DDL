Exp 1 : To design and develop SQL DDL statements which demonstrate
the use of SQL objects such as Table, View, Index, Sequence and Synonym.


-- 1. Create a Table
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,  -- Automatically uses a sequence for unique IDs
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,  -- Ensure unique emails
    hire_date DATE NOT NULL,
    salary NUMERIC(10, 2)
);

-- 2. Create a View to show high-earning employees
CREATE VIEW high_earning_employees AS
SELECT first_name, last_name, salary
FROM employees
WHERE salary > 50000;

-- 3. Create an Index for fast lookups by email
CREATE INDEX idx_employee_email ON employees(email);

-- 4. Create a Sequence (though SERIAL already does this, hereâ€™s how to create one manually)
CREATE SEQUENCE emp_seq
START WITH 1000
INCREMENT BY 1;

-- 5. Create a Synonym for the employees table
-- Note: PostgreSQL does not support synonyms natively. 
--       However, you can use a view or alias. For other databases, the syntax may be different.
-- Example for Oracle or other databases:
-- CREATE SYNONYM emp_synonym FOR employees;

-- Since PostgreSQL doesn't have synonyms, we'll use an alias here as a placeholder
-- In Oracle, the following would be valid: CREATE SYNONYM emp_synonym FOR employees;
-- In PostgreSQL, you can use this approach instead:
CREATE VIEW emp_synonym AS SELECT * FROM employees;

-- Optional: Insert some sample data into the employees table
INSERT INTO employees (first_name, last_name, email, hire_date, salary)
VALUES 
('John', 'Doe', 'john.doe@example.com', '2023-08-10', 60000),
('Jane', 'Smith', 'jane.smith@example.com', '2022-05-15', 45000),
('Alice', 'Johnson', 'alice.johnson@example.com', '2021-03-22', 75000);
